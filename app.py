import random
from datetime import datetime
import streamlit as st
from typing import Optional

from preprocess import preprocess_query
from classification import ZeroShotQueryClassifier
from generate_answer import AnswerGenerator
from database import InteractionLogger
from knowledge_base import build_vector_store
from langchain.vectorstores import Chroma
from config import ANSWER_FOR_SUPPORT_HELP, MAX_TRIES_TO_GET_CORRECT_TEXT_GENERATION

from db import CANDIDATE_LABELS, DATE_FORMAT, ChatDAO, MessageDAO, LabelDAO
from page_template import create_template

from PIL import Image

st.set_page_config(page_title="–ü–æ–º–æ—â–Ω–∏–∫ –ü–æ—Ä—Ç–∞–ª–∞ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤",
                   layout="wide",
                   page_icon=Image.open("static/logo.png"))

create_template()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
@st.cache_resource
def init_classifier() -> ZeroShotQueryClassifier:
    return ZeroShotQueryClassifier()


@st.cache_resource
def init_answerGenerator() -> AnswerGenerator:
    return AnswerGenerator()


@st.cache_resource
def init_db() -> InteractionLogger:
    return InteractionLogger()


@st.cache_resource
def init_vector_store() -> Chroma:
    return build_vector_store()


classifier = init_classifier()
answerGenerator = init_answerGenerator()
interactionLogger = init_db()
vector_store = init_vector_store()

# –ó–∞–≥—Ä—É–∑–∫–∞/–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (—ç—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
with st.spinner("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."):
    retriever = vector_store.as_retriever(search_type="similarity", search_kwargs={"k": 5})


class ChatInterface:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —á–∞—Ç–∞"""

   
    def __init__(self):
        self.chat_dao = ChatDAO()
        self.message_dao = MessageDAO()
        self.label_dao = LabelDAO()

    def render_sidebar(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å —á–∞—Ç–∞–º–∏"""
        with st.sidebar:
            self._render_new_chat_button()
            self._render_chat_history()

    def _render_new_chat_button(self):
        """–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        if st.button("–ù–æ–≤—ã–π —á–∞—Ç", use_container_width=True):
            new_chat_id = self.chat_dao.create_chat()
            st.session_state.current_chat = new_chat_id
            st.rerun()

    def _render_chat_history(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤"""
        st.subheader("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤")
        chats = self.chat_dao.get_all_chats()

        for chat in chats:
            self._render_chat_button(chat)

    def _render_chat_button(self, chat: tuple):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
        chat_id, title, created_at = chat
        formatted_date = datetime.strptime(
            created_at, DATE_FORMAT).strftime('%d.%m %H:%M')

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        display_title = (title[:15] + '...') if len(title) > 18 else title
        button_label = f"{display_title} ({formatted_date})"

        col1, col2 = st.columns([4, 1])
        with col1:
            if st.button(
                    button_label,
                    key=f"chat_{chat_id}",
                    use_container_width=True
            ):
                st.session_state.current_chat = chat_id
                st.rerun()

        with col2:
            with st.popover("‚öôÔ∏è"):
                self._render_chat_management_menu(chat_id, title)

    def _render_chat_management_menu(self, chat_id: int, current_title: str):
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º"""
        new_title = st.text_input(
            "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
            value=current_title,
            key=f"rename_{chat_id}"
        )

        if st.button("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", key=f"rename_btn_{chat_id}", use_container_width=True):
            if new_title.strip():
                self.chat_dao.update_chat_title(chat_id, new_title.strip())
                st.rerun()
            else:
                st.error("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{chat_id}", use_container_width=True):
            if st.session_state.current_chat == chat_id:
                st.session_state.current_chat = None
            self._delete_chat(chat_id)
            st.rerun()

    def _delete_chat(self, chat_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞"""
        self.chat_dao.delete_chat(chat_id)
        self.message_dao.delete_messages(chat_id)

    def render_main_interface(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞"""
        if not st.session_state.current_chat:
            self._render_empty_state()
            return

        self._render_chat_header()
        messages = self.message_dao.get_messages(st.session_state.current_chat)
        self._render_messages(messages)
        self._handle_user_query()

    def _render_empty_state(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"""
        st.info("–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞")

    def _render_chat_header(self):
        """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        col1, col2 = st.columns([0.7, 0.3])
        with col1:
            st.header(self._get_current_chat_title())

    def _get_current_chat_title(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞"""
        chats = self.chat_dao.get_all_chats()
        for chat in chats:
            if chat[0] == st.session_state.current_chat:
                return chat[1]
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"

    def _render_messages(self, messages: list):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
        for i, msg in enumerate(messages):
            if i == len(messages) - 1:
                self._render_message(msg)
                continue
            self._render_message(msg)

    def _render_message(self, msg: tuple):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_id, role, content, sources, timestamp, rating, label_id = msg
        with st.chat_message(role):
            st.write(content)
            if sources:
                st.write(sources)

            if role == 'assistant':
                self._render_rating_control(message_id, rating)
            else:

                if isinstance(label_id, int):
                    st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {CANDIDATE_LABELS[label_id]}")

            st.caption(timestamp)

    def _render_rating_control(self, message_id: int,
                               current_rating: Optional[int] = None, ):
        """–ö–æ–Ω—Ç—Ä–æ–ª –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""

        rating = st.radio("–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞:", options=["üëé –ù–µ –ø–æ–º–æ–≥–∞–µ—Ç", "üëç –ü–æ–ª–µ–∑–Ω–æ"],
                          key=f"rating_{message_id}", horizontal=True,
                          index=None if current_rating is None else current_rating)

        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É", key=f"save_raiting_{message_id}"):
            rating_value = 1 if rating == "üëç –ü–æ–ª–µ–∑–Ω–æ" else 0
            self.message_dao.update_field(message_id, 'rating', rating_value)
            st.success("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

    def _handle_user_query(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        if user_query := st.chat_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."):
            self._process_user_query(user_query)

    def _process_user_query(self, user_query: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if self._is_first_message_in_chat():
            self._generate_chat_title(user_query)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        msg_id = self.message_dao.add_message(
            st.session_state.current_chat,
            'user',
            user_query
        )
        self._render_message(self.message_dao.get_message(msg_id))
        with st.spinner("Wait for it...", show_time=True):
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
            self._generate_bot_response(user_query)
            st.rerun()

    def _is_first_message_in_chat(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤—ã–º –≤ —á–∞—Ç–µ"""
        messages = self.message_dao.get_messages(st.session_state.current_chat)
        return len(messages) == 0

    def _generate_chat_title(self, first_message: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        auto_title = (first_message[:30] + "...") if len(first_message) > 30 else first_message
        self.chat_dao.update_chat_title(
            st.session_state.current_chat,
            auto_title
        )

    def _generate_bot_response(self, user_query: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""

        buffer_queries = []
        buffer_answers = []
        is_correct_answer = False
        
        user_query = user_query.strip("\n ")

        for i in range(MAX_TRIES_TO_GET_CORRECT_TEXT_GENERATION):
            
            user_query = answerGenerator.generate_official_query(user_query)
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            processed_query = preprocess_query(user_query)
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
            category = classifier.classify(user_query)
    
            # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            relevant_docs = retriever.get_relevant_documents(processed_query)

            try:
                answer, sources = answerGenerator.generate_answer(user_query, relevant_docs)
            except RuntimeError:
                is_correct_answer = False
                continue

            is_correct_answer = answerGenerator.is_good_answer(user_query, answer)

            if is_correct_answer:
                break

            buffer_queries.append(user_query)
            buffer_answers.append(answer)

            user_query = answerGenerator.generate_new_query(buffer_queries, buffer_answers)


        last_label_id = CANDIDATE_LABELS.index(category)
        self.message_dao.update_field(self.message_dao.get_messages(st.session_state.current_chat)[-1][0],
                                        "label_id", last_label_id)
            
        answer = f"**–û—Ç–≤–µ—Ç:** {answer}"
        sources = f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:** {sources}"

        # –∑–∞–ø–∏—Å—å –≤ –ë–î
        self.message_dao.add_message(
            st.session_state.current_chat,
            'assistant',
            answer,
            last_label_id,
            sources,
        )


def main():
    chat_interface = ChatInterface()
    chat_interface.render_sidebar()
    chat_interface.render_main_interface()


if __name__ == "__main__":
    main()
